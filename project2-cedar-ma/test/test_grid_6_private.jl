using Test
using MPI
using project2


MPI.Init()
comm = MPI.COMM_WORLD
rank = MPI.Comm_rank(comm)
size = MPI.Comm_size(comm)

if rank == 0
    g = Grid(6, 6)
    set_boundary_condition!(g, (x, y) -> 10, sides=("left", "right"))
else
    g = nothing
end

my_g = partition_grid(g, comm)
solve!(my_g, comm, quiet=true)

if size == 2
    if rank == 0
        ans = [10.0 0.0 0.0 0.0;
               10.0 4.999999999999994 3.333333333333324 3.333333333333321;
               10.0 6.666666666666658 4.999999999999987 4.999999999999982;
               10.0 6.66666666666666 4.999999999999989 4.999999999999985;
               10.0 4.9999999999999964 3.3333333333333277 3.3333333333333255;
               10.0 0.0 0.0 0.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 1
        ans = [0.0 0.0 0.0 10.0;
               3.333333333333321 3.333333333333324 4.999999999999996 10.0;
               4.999999999999982 4.999999999999987 6.66666666666666 10.0;
               4.999999999999985 4.999999999999989 6.666666666666661 10.0;
               3.3333333333333255 3.3333333333333277 4.999999999999997 10.0;
               0.0 0.0 0.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    end
end

if size == 4
    if rank == 0
        ans = [10.0 0.0 0.0;
               10.0 4.999999999999973 3.3333333333332766;
               10.0 6.666666666666629 4.999999999999922;
               10.0 6.666666666666633 4.999999999999933;
               10.0 4.999999999999982 3.333333333333298;
               10.0 0.0 0.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 1
        ans = [0.0 0.0 0.0 0.0;
               4.999999999999962 3.3333333333332917 3.333333333333298 4.999999999999967;
               6.6666666666666154 4.999999999999944 4.999999999999952 6.6666666666666226;
               6.6666666666666226 4.999999999999952 4.999999999999959 6.666666666666629;
               4.999999999999976 3.333333333333308 3.3333333333333117 4.99999999999998;
               0.0 0.0 0.0 0.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 2
        ans = [0.0 0.0 10.0;
               3.3333333333332846 4.999999999999976 10.0;
               4.999999999999933 6.666666666666633 10.0;
               4.999999999999944 6.6666666666666385 10.0;
               3.333333333333304 4.999999999999986 10.0;
               0.0 0.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 3
        ans = [0.0 10.0;
               4.999999999999967 10.0;
               6.6666666666666226 10.0;
               6.666666666666629 10.0;
               4.99999999999998 10.0;
               0.0 10.0]        
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    end
end


get_solution!(g, my_g, comm)

if rank == 0
    ans = [10.0 10.0 10.0 10.0 10.0 10.0; 
           0.0 4.999999999999994 6.666666666666657 6.666666666666657 4.999999999999996 0.0; 
           0.0 3.333333333333324 4.999999999999988 4.999999999999988 3.3333333333333273 0.0; 
           0.0 3.3333333333333255 4.999999999999989 4.999999999999989 3.3333333333333277 0.0; 
           0.0 4.999999999999996 6.666666666666661 6.666666666666661 4.999999999999997 0.0; 
           10.0 10.0 10.0 10.0 10.0 10.0]'
    @test all(isapprox.(g.u, ans, atol=1.0e-3))
end

MPI.Finalize()
