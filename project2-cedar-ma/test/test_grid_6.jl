using Test
using MPI
using project2


MPI.Init()
comm = MPI.COMM_WORLD
rank = MPI.Comm_rank(comm)
size = MPI.Comm_size(comm)

if rank == 0
    g = Grid(6, 6)
    set_boundary_condition!(g, (x, y) -> 10, sides=("top", "bottom"))
else
    g = nothing
end

my_g = partition_grid(g, comm)
solve!(my_g, comm, quiet=true)

if size == 2
    if rank == 0
        ans = [10.0 10.0 10.0 10.0; 
               0.0 4.999999999999994 6.666666666666657 6.666666666666653; 
               0.0 3.333333333333324 4.999999999999988 4.999999999999982; 
               0.0 3.3333333333333255 4.999999999999989 4.999999999999986; 
               0.0 4.999999999999996 6.666666666666661 6.666666666666658; 
               10.0 10.0 10.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 1
        ans = [10.0 10.0 10.0 10.0; 
               6.666666666666653 6.666666666666657 4.999999999999996 0.0; 
               4.999999999999982 4.999999999999988 3.3333333333333273 0.0; 
               4.999999999999986 4.999999999999989 3.3333333333333277 0.0; 
               6.666666666666658 6.666666666666661 4.999999999999997 0.0; 
               10.0 10.0 10.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    end
end

if size == 4
    if rank == 0
        ans = [10.0 10.0 10.0;
               0.0 4.999999999999973 6.666666666666611;
               0.0 3.333333333333297 4.999999999999923;
               0.0 3.333333333333302 4.999999999999935;
               0.0 4.999999999999984 6.666666666666633;
               10.0 10.0 10.0] 
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 1
        ans = [10.0 10.0 10.0 10.0;
               4.999999999999964 6.666666666666626 6.666666666666633 4.999999999999969;
               3.333333333333283 4.999999999999945 4.999999999999954 3.3333333333332904;
               3.3333333333332904 4.999999999999954 4.99999999999996 3.333333333333297;
               4.999999999999977 6.666666666666642 6.666666666666646 4.999999999999981;
               10.0 10.0 10.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 2
        ans = [10.0 10.0 10.0;
               6.66666666666662 4.999999999999977 0.0;
               4.999999999999935 3.333333333333302 0.0;
               4.999999999999945 3.333333333333307 0.0;
               6.666666666666638 4.999999999999987 0.0;
               10.0 10.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    elseif rank == 3
        ans = [10.0 10.0;
               4.999999999999969 0.0;
               3.3333333333332904 0.0;
               3.333333333333297 0.0;
               4.999999999999981 0.0;
               10.0 10.0]
        @test all(isapprox.(my_g.u, ans, atol=1.0e-3))
    end
end


get_solution!(g, my_g, comm)

if rank == 0
    ans = [10.0 10.0 10.0 10.0 10.0 10.0; 
           0.0 4.999999999999994 6.666666666666657 6.666666666666657 4.999999999999996 0.0; 
           0.0 3.333333333333324 4.999999999999988 4.999999999999988 3.3333333333333273 0.0; 
           0.0 3.3333333333333255 4.999999999999989 4.999999999999989 3.3333333333333277 0.0; 
           0.0 4.999999999999996 6.666666666666661 6.666666666666661 4.999999999999997 0.0; 
           10.0 10.0 10.0 10.0 10.0 10.0]
    @test all(isapprox.(g.u, ans, atol=1.0e-3))
end

MPI.Finalize()
